name: Synapse Artifacts Deployment Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        default: "dev"
        description: "Specifies the environment of the deployment."
      azure_resource_group_name:
        required: true
        description: "Specifies the name of the resource group for the deployment."
      source_synapse_workspace_name:
        required: true
        type: string
        description: "Specifies the name of the source synapse workspace."
      target_synapse_workspace_name:
        required: true
        type: string
        description: "Specifies the name of the target synapse workspace."
    secrets:
      AZURE_CLIENT_ID:
        required: true
        description: "Specifies the client ID."
      AZURE_SUBSCRIPTION_ID:
        required: true
        description: "Specifies the subscription id of the deployment."
      AZURE_TENANT_ID:
        required: true
        description: "Specifies the tenant id of the deployment."
      #AZURE_CREDENTIALS:
        #required: true
        #description: "Specifies the azure credentials for deployment."

permissions:
  id-token: write
  contents: read

jobs:
  deployment:
    name: Deployment for ${{ inputs.environment }}
    runs-on: ubuntu-latest
    continue-on-error: false
    #if: github.event_name == 'push' || github.event_name == 'release'
    environment: ${{ inputs.environment }}

    steps:
      # Check Out Repository
      - name: Check Out Repository
        id: checkout_repository
        uses: actions/checkout@v3

            # # Install Required Modules
      - name: Install Required Modules
        id: install_modules
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module Az -ErrorAction Stop
        shell: pwsh

      - name: Log into Azure (via OIDC)
        uses: azure/login@v1
        with:
          #creds: ${{ secrets.AZURE_CREDENTIALS }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Get key vault secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "yamlkeyvault"
          secrets: 'devops-demo-app-secret'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: myGetSecretAction
      - name: "Get working Az Context with PowerShell action"
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Get-AzContext
          azPSVersion: "latest"
